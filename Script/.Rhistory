pROC,
sf,
leaflet,
tmaptools,
osmdata)
rm(list = ls()) #Limpia las variables que existan al momento de correr el código
###Base de datos Problem set 2
library(readr)
#Se debe poner el directorio de donde está el script:
#Session-> Set Working directory -> To source file location, para lo cual se debe descargar el repositorio DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds" #Guardar las bases de datos
DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds"))  #Guardar las bases de datos
setwd("C:/Users/valer/Desktop/Andes/Intersemestral/Big Data/ArchivoPS3/Problem-Set-3/Script")
#Se debe poner el directorio de donde está el script:
#Session-> Set Working directory -> To source file location, para lo cual se debe descargar el repositorio DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds" #Guardar las bases de datos
DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds"))  #Guardar las bases de datos
DTRAIN <- data.frame(readRDS("../Elementos_Guardados/train.rds"))
DTRAIN$description<-str_to_lower(string=DTRAIN$description)
DTRAIN$title<-str_to_lower(string=DTRAIN$title)
View(DTRAIN)
DTEST$description<-str_to_lower(string=DTEST$description)
DTEST$title<-str_to_lower(string=DTEST$title)
View(DTEST)
#Filtrar por zonas Chapinero y El poblado
x<-str_detect( DTRAIN$description,"chapinero")
y<-str_detect( DTRAIN$description,"chapnero")
z<-str_detect( DTRAIN$description,"chap")
xx<-str_detect( DTRAIN$description,"poblado")
yy<-str_detect( DTRAIN$description,"pobado")
a<-str_detect( DTRAIN$title,"chapinero")
b<-str_detect( DTRAIN$title,"chapnero")
c<-str_detect( DTRAIN$title,"chap")
aa<-str_detect( DTRAIN$title,"poblado")
bb<-str_detect( DTRAIN$title,"pobado")
View(DTRAIN)
DTRAIN<-DTRAIN%>% mutate(Chap_poblado=ifelse(x==TRUE|y==TRUE| z==TRUE|xx==TRUE|yy==TRUE|a==TRUE|b==TRUE|c==TRUE|aa==TRUE|bb==TRUE,1,0 ))
table(DTRAIN$Chap_poblado)
View(DTRAIN)
rm(list = ls()) #Limpia las variables que existan al momento de correr el código
###Base de datos Problem set 2
library(readr)
#Se debe poner el directorio de donde está el script:
#Session-> Set Working directory -> To source file location, para lo cual se debe descargar el repositorio DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds" #Guardar las bases de datos
DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds"))  #Guardar las bases de datos
DTRAIN <- data.frame(readRDS("../Elementos_Guardados/train.rds"))
summary(DTRAIN$description)
DTRAIN$description<-str_to_lower(string=DTRAIN$description)
DTRAIN$title<-str_to_lower(string=DTRAIN$title)
DTEST$description<-str_to_lower(string=DTEST$description)
DTEST$title<-str_to_lower(string=DTEST$title)
#Filtrar por zonas Chapinero y El poblado
x<-str_detect( DTRAIN$description,"chapinero")
y<-str_detect( DTRAIN$description,"chapnero")
z<-str_detect( DTRAIN$description,"chap")
xx<-str_detect( DTRAIN$description,"poblado")
yy<-str_detect( DTRAIN$description,"pobado")
a<-str_detect( DTRAIN$title,"chapinero")
b<-str_detect( DTRAIN$title,"chapnero")
c<-str_detect( DTRAIN$title,"chap")
aa<-str_detect( DTRAIN$title,"poblado")
bb<-str_detect( DTRAIN$title,"pobado")
DTRAIN<-DTRAIN%>% mutate(Chap_poblado=ifelse(x==TRUE|y==TRUE| z==TRUE|xx==TRUE|yy==TRUE|a==TRUE|b==TRUE|c==TRUE|aa==TRUE|bb==TRUE,1,0 ))
summary(DTRAIN$description)
rm(list = ls()) #Limpia las variables que existan al momento de correr el código
###Base de datos Problem set 2
library(readr)
#Se debe poner el directorio de donde está el script:
#Session-> Set Working directory -> To source file location, para lo cual se debe descargar el repositorio DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds" #Guardar las bases de datos
DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds"))  #Guardar las bases de datos
DTRAIN <- data.frame(readRDS("../Elementos_Guardados/train.rds"))
View(DTRAIN)
View(DTRAIN)
DTRAIN$description<-str_to_lower(string=DTRAIN$description)
DTRAIN$title<-str_to_lower(string=DTRAIN$title)
DTEST$description<-str_to_lower(string=DTEST$description)
DTEST$title<-str_to_lower(string=DTEST$title)
#Filtrar por zonas Chapinero y El poblado
x<-str_detect( DTRAIN$description,"chapinero")
y<-str_detect( DTRAIN$description,"chapnero")
z<-str_detect( DTRAIN$description,"chap")
xx<-str_detect( DTRAIN$description,"poblado")
yy<-str_detect( DTRAIN$description,"pobado")
a<-str_detect( DTRAIN$title,"chapinero")
b<-str_detect( DTRAIN$title,"chapnero")
c<-str_detect( DTRAIN$title,"chap")
aa<-str_detect( DTRAIN$title,"poblado")
bb<-str_detect( DTRAIN$title,"pobado")
x[is.na(x)] = 0
y[is.na(y)] = 0
z[is.na(z)] = 0
xx[is.na(xx)] = 0
yy[is.na(yy)] = 0
a[is.na(a)] = 0
b[is.na(b)] = 0
c[is.na(c)] = 0
aa[is.na(aa)] = 0
bb[is.na(bb)] = 0
DTRAIN_mapa<- DTRAIN[DTRAIN$Chap_poblado==1,]
#Creación variable Parqueadero para train y test
Descripc_test<-DTEST$description
parqueaderoT_aux1<-str_detect( Descripc_test,"parqueadero")
parqueaderoT_aux2<-str_detect( Descripc_test,"parqueaderos")
parqueaderoT_aux3<-str_detect( Descripc_test,"parqeadero")
parqueaderoT_aux4<-str_detect( Descripc_test,"parqeaderos")
parqueaderoT_aux5<-str_detect( Descripc_test,"garaje")
parqueaderoT_aux6<-str_detect( Descripc_test,"garajes")
parqueaderoT<-ifelse(parqueaderoT_aux1==TRUE|parqueaderoT_aux2==TRUE| parqueaderoT_aux3==TRUE|parqueaderoT_aux4==TRUE|parqueaderoT_aux5==TRUE|parqueaderoT_aux6==TRUE,1,0 )
parqueaderoT<-data.frame(parqueaderoT)
parqueaderoT[is.na(parqueaderoT)] = 0
summary(parqueaderoT)
DTEST<- cbind(DTEST, parqueaderoT)
rm(parqueaderoT)
Descripc_train<-DTRAIN$description
parqueadero_aux1<-str_detect( Descripc_train,"parqueadero")
parqueadero_aux2<-str_detect( Descripc_train,"parqueaderos")
parqueadero_aux3<-str_detect( Descripc_train,"parqeadero")
parqueadero_aux4<-str_detect( Descripc_train,"parqeaderos")
parqueadero_aux5<-str_detect( Descripc_train,"garaje")
parqueadero_aux6<-str_detect( Descripc_train,"garajes")
parqueaderoT<-ifelse(parqueadero_aux1==TRUE|parqueadero_aux2==TRUE| parqueadero_aux3==TRUE|parqueadero_aux4==TRUE|parqueadero_aux5==TRUE|parqueadero_aux6==TRUE,1,0 )
parqueaderoT<-data.frame(parqueaderoT)
summary(parqueaderoT)
parqueaderoT[is.na(parqueaderoT)] = 0
summary(parqueaderoT)
DTRAIN <- cbind(DTRAIN, parqueaderoT)
rm(parqueaderoT)
#Creación variable  para train y test
ascensorT_aux1<-str_detect( Descripc_test,"ascensor")
ascensorT_aux2<-str_detect( Descripc_test,"acensor")
ascensorT_aux3<-str_detect( Descripc_test,"asensor")
ascensorT_aux4<-str_detect( Descripc_test,"elevador")
ascensorT_aux5<-str_detect( Descripc_test,"ascensores")
ascensorT_aux6<-str_detect( Descripc_test,"acensores")
ascensorT_aux7<-str_detect( Descripc_test,"asensores")
ascensorT_aux8<-str_detect( Descripc_test,"elevadores")
ascensorT<-ifelse(ascensorT_aux1==TRUE|ascensorT_aux2==TRUE| ascensorT_aux3==TRUE|ascensorT_aux4==TRUE|ascensorT_aux5==TRUE|ascensorT_aux6==TRUE|ascensorT_aux7==TRUE|ascensorT_aux8==TRUE, 1,0 )
ascensorT<-data.frame(ascensorT)
ascensorT[is.na(ascensorT)] = 0
summary(ascensorT)
DTEST <- cbind(DTEST, ascensorT)
rm(ascensorT)
ascensor_aux1<-str_detect( Descripc_train,"ascensor")
ascensor_aux2<-str_detect( Descripc_train,"acensor")
ascensor_aux3<-str_detect( Descripc_train,"asensor")
ascensor_aux4<-str_detect( Descripc_train,"elevador")
ascensor_aux5<-str_detect( Descripc_train,"ascensores")
ascensor_aux6<-str_detect( Descripc_train,"acensores")
ascensor_aux7<-str_detect( Descripc_train,"asensores")
ascensor_aux8<-str_detect( Descripc_train,"elevadores")
ascensorT<-ifelse(ascensor_aux1==TRUE|ascensor_aux2==TRUE| ascensor_aux3==TRUE|ascensor_aux4==TRUE|ascensor_aux5==TRUE|ascensor_aux6==TRUE|ascensor_aux7==TRUE|ascensor_aux8==TRUE, 1,0 )
ascensorT<-data.frame(ascensorT)
ascensorT[is.na(ascensorT)] = 0
DTRAIN <- cbind(DTRAIN, ascensorT)
rm(ascensorT)
table(DTRAIN$l3)
table(DTEST$l3)
table(DTRAIN$l3)
table(DTEST$l3)
table(is.na(DTRAIN$surface_total))
table(is.na(DTRAIN$surface_covered))
DTRAIN[46,]
DTRAIN_sf <- DTRAIN %>% st_as_sf(coords = c("lon", "lat"), crs = 4326)
class(DTRAIN_sf)
DTRAIN_sf_mapa <-DTRAIN_mapa %>% st_as_sf(coords = c("lon", "lat"), crs = 4326)
class(DTRAIN_sf_mapa)
#Para visualizar todas las observaciones en Bogotá y Medellín
leaflet() %>% addTiles() %>% addCircleMarkers(data=DTRAIN_sf_mapa)
DTRAIN_sf_mapa <-DTRAIN_mapa %>% st_as_sf(coords = c("lon", "lat"), crs = 4326)
View(DTRAIN_sf_mapa)
View(DTRAIN_sf_mapa)
View(DTRAIN_mapa)
DTRAIN<-DTRAIN%>% mutate(Chap_poblado=ifelse(x==TRUE|y==TRUE| z==TRUE|xx==TRUE|yy==TRUE|a==TRUE|b==TRUE|c==TRUE|aa==TRUE|bb==TRUE,1,0 ))
DTRAIN_mapa<- DTRAIN[DTRAIN$Chap_poblado==1,]
#Para visualizar todas las observaciones en Bogotá y Medellín
leaflet() %>% addTiles() %>% addCircleMarkers(data=DTRAIN_sf_mapa)
DTRAIN_sf_mapa <-DTRAIN_mapa %>% st_as_sf(coords = c("lon", "lat"), crs = 4326)
class(DTRAIN_sf_mapa)
#Para visualizar todas las observaciones en Bogotá y Medellín
leaflet() %>% addTiles() %>% addCircleMarkers(data=DTRAIN_sf_mapa)
PointElPoblado = geocode_OSM("El poblado, Medellín", as.sf=T)
PointElPoblado
PointChapinero = geocode_OSM("Chapinero, Bogotá", as.sf=T)
PointChapinero
leaflet() %>% addTiles() %>% addCircles(data=PointChapinero)%>%
addCircleMarkers(data=DTRAIN_sf_mapa)
leaflet() %>% addTiles() %>% addCircles(data=PointChapinero)%>%
addCircleMarkers(data=DTRAIN_sf_mapa, color = "red")
leaflet() %>% addTiles() %>% addCircles(data=PointChapinero, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
#Poligono chapinero
Polchapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data=chapinero)
leaflet() %>% addTiles() %>% addPolygons(data=Polchapinero)
leaflet() %>% addTiles() %>% addPolygons(data= Polchapinero, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
#Poligono poblado
Polchapinero <- getbb(place_name = "UPZ El poblado, Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= Polchapinero, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa$l3[Bogotá D.C], col= "red")
#Poligono poblado
PolPoblado <- getbb(place_name = " El poblado, Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= PolPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
#Poligono chapinero
Polchapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
#Poligono poblado
PolPoblado <- getbb(place_name = " El poblado, Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
#Poligono poblado
PolPoblado <- getbb(place_name = " El poblado, Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
View(PointElPoblado)
leaflet() %>% addTiles() %>% addPolygons(data= PointElPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
PointElPoblado = getbb(geocode_OSM("El poblado, Medellín", as.sf=T))
PointElPoblado = geocode_OSM("El poblado, Medellín", as.sf=T)
PointElPoblado
leaflet() %>% addTiles() %>% addPolylines(data= PointElPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
#Poligono poblado
PolPoblado <- getbb(place_name = " El Poblado",
featuretype = "neighbourhood",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= PolPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
PolPoblado <- getbb(place_name = " El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= PointElPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
View(PointElPoblado)
View(PointElPoblado)
PolPoblado
#Poligono poblado
PolPoblado <- getbb(place_name = " El Poblado, Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
#Poligono poblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= PointElPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
PolPoblado
#Poligono poblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado, Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
PolPoblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado, Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
PolPoblado
#Poligono poblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
PolPoblado
#Poligono poblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado, Medellín",
featuretype = "place:suburb",
format_out = "sf_polygon") %>% .$multipolygon
PolPoblado
PolPoblado <- getbb(place_name = "Comuna 14 - El Poblado, Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= PointElPoblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
## objeto osm
## obtener la caja de coordenada que contiene el polígono de Chapinero y El poblado
opq(bbox = getbb("El Poblado Medellín"))
opq(bbox = getbb("Chapinero Bogotá"))
## objeto osm
## obtener la caja de coordenada que contiene el polígono de Chapinero y El poblado
opq(bbox = getbb("Comuna 14 - El Poblado Medellín"))
opq(bbox = getbb("Chapinero Bogotá"))
## objeto osm
## obtener la caja de coordenada que contiene el polígono de Chapinero y El poblado
cajaElpob <- opq(bbox = getbb("Comuna 14 - El Poblado Medellín"))
View(cajaElpob)
PointElPoblado = geocode_OSM("Comuna 14 - El Poblado, Medellín", as.sf=T)
PointElPoblado
PointChapinero = geocode_OSM("UPZ Chapinero, Bogotá", as.sf=T)
PointChapinero
PointChapinero
leaflet() %>% addTiles() %>% addCircles(data=PointElPoblado)
leaflet() %>% addTiles() %>% addCircles(data=PointChapinero)
leaflet() %>% addTiles() %>% addPolygons(data= Polchapinero, col = "blue")
## objeto osm para extracción de amenity
osmmed = opq(bbox = getbb("Medellin")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osmmed)
osmbog = opq(bbox = getbb(" Bogotá ")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osmbog)
osmmed_sf = osmmed %>% osmdata_sf()
osmbog_sf = osmbog %>% osmdata_sf()
##Extracción datos de manzanas
mnzBogota<-readRDS("../Elementos_Guardados/Bogota.rds") #Datos de manzanas Bogotá
mnzAntioquia<-readRDS("../Elementos_Guardados/Antioquia.rds") #Datos de manzanas Antioquia
CHAPINERO = getbb(place_name = "Chapinero Bogotá",
featuretype = "amenity",
format_out = "sf_polygon")
Poblado = getbb(place_name = "El Poblado Medellin",
featuretype = "amenity",
format_out = "sf_polygon")
Poblado
Poblado = getbb(place_name = "Comuna 14 - El Poblado Medellin",
featuretype = "amenity",
format_out = "sf_polygon")
Poblado
leaflet() %>% addTiles() %>% addPolygons(data= Poblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf_mapa, col= "red")
DTEST_sf <- DTEST %>% st_as_sf(coords = c("lon", "lat"), crs = 4326)
leaflet() %>% addTiles() %>% addPolygons(data= Poblado, col = "blue")%>%
addCircleMarkers(data=DTEST_sf, col= "red")
leaflet() %>% addTiles() %>% addPolygons(data= Poblado, col = "blue")%>%
addCircleMarkers(data=DTRAIN_sf, col= "red")
Transporte_publicoMed = osmmed_sf$osm_points %>% select(osm_id,amenity)
Transporte_publicoBog = osmbog_sf$osm_points %>% select(osm_id,amenity)
## Pintar las transporte publico
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoMed , col="red")
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoBog, col="blue")
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoMed , col="red")%>% addPolygons(data= Polchapinero, col = "blue")
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoBog, col="blue")%>% addPolygons(data= Polchapinero, col = "blue")
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoBog, col="blue")%>% addPolygons(data= Polchapinero, col = "RED")
##Extracción datos de manzanas
mnzBogota<-readRDS("../Elementos_Guardados/Bogota.rds") #Datos de manzanas Bogotá
mnzAntioquia<-readRDS("../Elementos_Guardados/Antioquia.rds") #Datos de manzanas Antioquia
#Bares Bogotá y Antioquia
barbog = opq(bbox = st_bbox(mnzBogota)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barbog %>% head()
barant = opq(bbox = st_bbox(mnzAntioquia)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barant %>% head()
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%  # transportepub
addCircles(data= DTRAIN_sf , col="red", weight=2) %>% # apartamentos
addCircles(data=barbog , col="black" , weight=2)
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%  # transportepub
addCircles(data= DTRAIN_sf , col="red", weight=2) %>% # apartamentos
addCircles(data=barbog , col="black" , weight=2)
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%  # transportepub
addCircles(data= DTRAIN_sf , col="red", weight=2) %>% # apartamentos
addCircles(data=barbog , col="black" , weight=2)
st_crs(mnz) == st_crs(DTRAIN_sf)
mns<- cbind(mnzBogota,mnzAntioquia)
st_crs(mnzBogota) == st_crs(DTRAIN_sf)
st_crs(mnzAntioquia) == st_crs(DTRAIN_sf)
Uniondatbog = st_join(x=DTRAIN_sf , y=mnzBogota)
View(Uniondatbog)
Uniondatbog$dist_bar = st_distance(x=Uniondatbog , y=barbog)
View(Uniondatbog)
DTRAIN$description[928,]
DTRAIN[928,]
install.packages("pacman") #Instalar librería si no cuenta con esta
library(pacman) #Llamar librería#Se cargan las librerías a usar en el presente Problem Set
p_load(caret,
Matrix,
recipes,
rio, #Instalar librerías que falten
tidyverse,
glmnet,
dplyr,
readr,
gamlr,
tidymodels,
ggplot2,
scales,
ggpubr,
skimr,
rvest,
caret,
stringr,
boot,
caret,
modeest,
recipes,
glmnet,
stargazer,
pROC,
sf,
leaflet,
tmaptools,
nngeo,
osmdata)
rm(list = ls()) #Limpia las variables que existan al momento de correr el código
###Base de datos Problem set 2
library(readr)
#Se debe poner el directorio de donde está el script:
#Session-> Set Working directory -> To source file location, para lo cual se debe descargar el repositorio DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds" #Guardar las bases de datos
DTEST<-data.frame(readRDS("../Elementos_Guardados/test.rds"))  #Guardar las bases de datos
DTRAIN <- data.frame(readRDS("../Elementos_Guardados/train.rds"))
View(DTRAIN)
DTRAIN$description<-str_to_lower(string=DTRAIN$description)
DTRAIN$title<-str_to_lower(string=DTRAIN$title)
DTEST$description<-str_to_lower(string=DTEST$description)
DTEST$title<-str_to_lower(string=DTEST$title)
#En esta sección se unen la base Train y test para realizar la limpieza de datos
train<- DTRAIN %>% mutate(base = "train")
test <- DTEST %>% mutate(base="test")
View(test)
View(test)
HOUSE<- bind_rows(DTRAIN,DTEST) %>% st_as_sf(coords=c("lon","lat"),crs=4326)
leaflet() %>% addTiles() %>% addCircles(data = HOUSE)
str(HOUSE)
Polchapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
leaflet() %>% addTiles() %>% addPolygons(data= Polchapinero, col = "red")
st_crs(HOUSE)
st_crs(Polchapinero)
Polchapinero <- st_transform(Polchapinero, st_crs(HOUSE))
House_Chapinero<- HOUSE[Polchapinero,]
leaflet() %>% addTiles() %>% addCircles(data = House_Chapinero, color = "red" ) %>% addPolygons(data= Polchapinero, col = "blue")
available_features()
available_tags("amenity")
setwd("E:/MAESTRIA UNIANDES/BIG DATA/Problem-Set-3/Script")
mnzBog<-readRDS("../Elementos_Guardados/Bogota.rds") #Datos de manzanas Bogotá
sf_use_s2(FALSE)
mnzBogota<-subset(mnzBog, select=c("MANZ_CCNCT", "geometry"))
mnz_chap <- mnzBogota[Polchapinero,]
leaflet() %>% addTiles() %>% addCircles(data = House_Chapinero, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
house_chapinero_mnz <- st_join(House_Chapinero, mnz_chap)
colnames(house_chapinero_mnz)
table(is.na(house_chapinero_mnz$MANZ_CCNCT))
View(house_chapinero_mnz)
View(house_chapinero_mnz)
table(is.na(house_chapinero_mnz$MANZ_CCNCT))
db_1 <- house_chapinero_mnz %>% subset(is.na(MANZ_CCNCT)==F)
db_2 <- house_chapinero_mnz %>% subset(is.na(MANZ_CCNCT)==T) %>% mutate(MANZ_CCNCT = NULL)
View(db_2)
View(db_2)
leaflet() %>% addTiles() %>% addPolygons(data=db_2[1,] %>% st_buffer(dist = 0.0005))
db_2 <- st_join(st_buffer(db_2, dist = 0.0005), mnz_chap)%>% subset(duplicated(property_id)==F)
View(db_2)
View(db_2)
#MANNZ
table(is.na(db_2$MANZ_CCNCT.y))
db_2
#MANNZ
table(is.na(db_2$MANZ_CCNCT))
Distancia_cercana<-st_nn(db_2, mnz_chap, k = 1, maxdist =  0.0005, progress=TRUE)
db2_NA_Bog<-db_2[is.na(db_2$MANZ_CCNCT),]
Distancia_cercana_mnzBog<-st_join(db2_NA_Bog, mnz_chap, join = st_nn , maxdist = 0.0005 , k = 1 , progress = FALSE)
View(Distancia_cercana_mnzBog)
View(Distancia_cercana_mnzBog)
Distancia_cercana_mnzBog<-st_nn(db2_NA_Bog, mnz_chap, k = 1, maxdist =  0.0005, progress=FALSE)
Distancia_cercana_mnzBog<-st_nn(db2_NA_Bog, mnz_chap, k = 1, maxdist = 10, progress=TRUE)
View(Distancia_cercana_mnzBog)
View(Distancia_cercana_mnzBog)
Distancia_cercana_mnzBog
leaflet() %>% addTiles() %>% addCircles(data = db2_NA_Bog, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
db2_NA_Bog<-db2_NA_Bog%>% st_as_sf(coords=c("lon","lat"),crs=4326)
leaflet() %>% addTiles() %>% addCircles(data = db2_NA_Bog, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
View(db2_NA_Bog)
View(db2_NA_Bog)
View(db2_NA_Bog)
View(db2_NA_Bog)
View(db2_NA_Bog)
View(db2_NA_Bog)
db2_NA_Bog<-db2_NA_Bog%>% st_as_sf(coords=c("lon","lat"),crs=4326)
leaflet() %>% addTiles() %>% addCircles(data = db2_NA_Bog, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
leaflet() %>% addTiles() %>% addCircles(data = db2, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
leaflet() %>% addTiles() %>% addCircles(data = db_2, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
leaflet() %>% addTiles() %>% addCircles(data = House_Chapinero, color = "red" ) %>% addPolygons(data= mnz_chap, col = "blue")
db_2 <- st_join(st_buffer(db_2, dist = 0.001), mnz_chap)%>% subset(duplicated(property_id)==F)
#MANNZ
table(is.na(db_2$MANZ_CCNCT))
#MANNZ
table(is.na(db_2$MANZ_CCNCT))
View(db_2)
View(db_2)
#MANNZ
table(is.na(db_2$MANZ_CCNCT.y))
#MANNZ
table(is.na(db_2$MANZ_CCNCT))
db_2 <- st_join(st_buffer(db_2, dist = 0.001), mnz_chap)%>% subset(duplicated(property_id)==F)
leaflet() %>% addTiles() %>% addPolygons(data=db_2[1,] %>% st_buffer(dist = 0.001))
leaflet() %>% addTiles() %>% addPolygons(data=db_2[1,] %>% st_buffer(dist = 0.0005))
db_2 <- st_join(st_buffer(db_2, dist = 0.0001), mnz_chap)%>% subset(duplicated(property_id)==F)
#MANNZ
table(is.na(db_2$MANZ_CCNCT.y))
leaflet() %>% addTiles() %>% addPolygons(data=db_2[1,] %>% st_buffer(dist = 0.0002))
leaflet() %>% addTiles() %>% addPolygons(data=db_2[1,] %>% st_buffer(dist = 0.000002))
db_2 <- st_join(st_buffer(db_2, dist = 0.0002), mnz_chap)%>% subset(duplicated(property_id)==F)
db_2 <- st_join(st_buffer(db_2, dist = 0.000002), mnz_chap)%>% subset(duplicated(property_id)==F)
#MANNZ
table(is.na(db_2$MANZ_CCNCT.y))
