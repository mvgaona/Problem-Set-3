PolPoblado
PolPoblado_2<-st_as_sf(coords=c("lon","lat"),crs=4326)
View(buf_Med_mnz)
View(buf_Med_mnz)
house_pob_mnz_2 <- st_join(x=House_Poblado, y=buf_Med_mnz)
View(house_pob_mnz_2)
View(house_pob_mnz_2)
table(house_pob_mnz_2$base)
rm(house_pob_mnz_2)
mnzMedellin<-subset(mnzAnt, select=c("MANZ_CCNCT", "geometry"))
mnz_pob <- mnzMedellin[PolPoblado,]
leaflet() %>% addTiles() %>% addCircles(data = House_Poblado, color = "red" ) %>% addPolygons(data= mnz_pob, col = "blue")
buf_Med_mnz <- st_buffer(mnz_pob,dist=0.0005)
house_pob_mnz_2 <- st_join(x=House_Poblado, y=buf_Med_mnz)
PolPoblado_buf <- st_buffer(PolPoblado,dist=0.0005)
leaflet() %>% addTiles() %>% addPolygons(data= PolPoblado, col = "red")%>% addPolygons(data= PolPoblado_buf, col = "blue")
PolPoblado_buf <- st_buffer(PolPoblado,dist=0.001)
leaflet() %>% addTiles() %>% addPolygons(data= PolPoblado, col = "red")%>% addPolygons(data= PolPoblado_buf, col = "blue")
House_Poblado<- HOUSE[PolPoblado_buf,]
table(House_Poblado$base)
View(House_Poblado)
View(House_Poblado)
House_Poblado<- HOUSE[PolPoblado,]
table(House_Poblado$base)
table(test$base)
table(house_chapinero_mnz$base)
HOUSE_Bog<- DTEST[DTEST$l3=="Bogotá D.C",]
House_Poblado<- HOUSE[PolPoblado_buf,]
table(House_Poblado$base)
available_features()
available_tags("amenity")
mnzAnt<-readRDS("../Elementos_Guardados/Antioquia.rds") #Datos de manzanas Antioquia
sf_use_s2(FALSE)
mnzMedellin<-subset(mnzAnt, select=c("MANZ_CCNCT", "geometry"))
mnz_pob <- mnzMedellin[PolPoblado,]
mnz_pob <- mnzMedellin[PolPoblado_buf,]
mnz_pob <- mnzMedellin[PolPoblado_buf,]
leaflet() %>% addTiles() %>% addCircles(data = House_Poblado, color = "red" ) %>% addPolygons(data= mnz_pob, col = "blue")
buf_Med_mnz <- st_buffer(mnz_pob,dist=0.0005)
house_pob_mnz_2 <- st_join(x=House_Poblado, y=buf_Med_mnz)
house_pob_mnz <- st_join(x=House_Poblado, y=mnz_pob)
colnames(house_pob_mnz)
table(is.na(house_pob_mnz$MANZ_CCNCT))
db_1M <- house_pob_mnz %>% subset(is.na(MANZ_CCNCT)==F)
db_2M<- house_pob_mnz %>% subset(is.na(MANZ_CCNCT)==T) %>% mutate(MANZ_CCNCT = NULL)
db_2M <- st_join(st_buffer(db_2M, dist = 0.0009), mnzMedellin)%>% subset(duplicated(property_id)==F)
table(is.na(db_2M$MANZ_CCNCT))
db_2M <- st_join(st_buffer(db_2M, dist = 0.001), mnzMedellin)%>% subset(duplicated(property_id)==F)
table(is.na(db_2M$MANZ_CCNCT))
table(is.na(db_2M$MANZ_CCNCT))
db_2M <- st_join(st_buffer(db_2M, dist = 0.001), mnzMedellin)%>% subset(duplicated(property_id)==F)
table(is.na(db_2M$MANZ_CCNCT))
filtro_Med<-is.na(house_pob_mnz$MANZ_CCNCT)
house_pob_mnz$MANZ_CCNCT[filtro_Med]<-db_2M$MANZ_CCNCT
table(is.na(house_pob_mnz$MANZ_CCNCT))
house_pob_mnz <-  house_pob_mnz %>%
group_by(MANZ_CCNCT) %>%
mutate(new_surface_2=median(surface_total,na.rm=T))
table(is.na( house_pob_mnz$new_surface_2))
house_buf_Med <- st_buffer(House_Poblado,dist=0.008)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf_Med , color="red") %>% addCircles(data=house_pob_mnz)
house_buf_Med<- st_join(house_buf_Med,House_Poblado[,"surface_total"])
house_buf_Med<- st_join(house_buf_Med,House_Poblado[,"surface_total"])
st_geometry(house_buf_Med) = NULL
house_buf_mean_Med <-house_buf_Med %>% group_by(property_id) %>% summarise(surface_new_3=mean(surface_total.y,na.rm=T))
house_pob_mnz<- left_join(house_pob_mnz,house_buf_mean_Med ,"property_id")
table(is.na( house_pob_mnz$new_surface_2))
table(is.na( house_pob_mnz$surface_new_3))
HOUSEOF<- rbind.data.frame(house_pob_mnz, house_chapinero_mnz)
view(HOUSEOF)
table(is.na( HOUSEOF$surface_new_3))
table(HOUSEOF$base)
table(is.na( HOUSEOF$surface_new_3))
#CREACIÓN VARIABLES POR MEDIO DE DESCRIPCIÓN PARA BASE DE DATOS
Descripc<-HOUSEOF$description
parqueaderoT_aux1<-str_detect( Descripc,"parqueadero")
parqueaderoT_aux2<-str_detect( Descripc,"parqueaderos")
parqueaderoT_aux3<-str_detect( Descripc,"parqeadero")
parqueaderoT_aux4<-str_detect( Descripc,"parqeaderos")
parqueaderoT_aux5<-str_detect( Descripc,"garaje")
parqueaderoT_aux6<-str_detect( Descripc,"garajes")
parqueaderoT_aux7<-str_detect( Descripc,"garage")
parqueaderoT_aux8<-str_detect( Descripc,"garages")
parqueaderoT_aux9<-str_detect( Descripc,"garjes")
parqueaderoT_aux10<-str_detect( Descripc,"garje")
parqueaderoT<-ifelse(parqueaderoT_aux1==TRUE|parqueaderoT_aux2==TRUE| parqueaderoT_aux3==TRUE|parqueaderoT_aux4==TRUE|parqueaderoT_aux5==TRUE|parqueaderoT_aux6==TRUE|parqueaderoT_aux7==TRUE|parqueaderoT_aux8==TRUE|parqueaderoT_aux9 == TRUE |parqueaderoT_aux10==TRUE , 1,0 )
parqueaderoT<-data.frame(parqueaderoT)
summary(parqueaderoT)
parqueaderoT[is.na(parqueaderoT)] = 0 #Se imputa cero a los datos NA, porque existen datos donde no había descripción
summary(parqueaderoT)
HOUSEOF <- cbind(HOUSEOF, ParqueaderoT)
HOUSEOF <- cbind(HOUSEOF, parqueaderoT)
#####
#Vamos a crear la variable: Ascensor
ascensorT_aux1<-str_detect( Descripc,"ascensor")
ascensorT_aux2<-str_detect( Descripc,"acensor")
ascensorT_aux3<-str_detect( Descripc,"asensor")
ascensorT_aux4<-str_detect( Descripc,"elevador")
ascensorT_aux5<-str_detect( Descripc,"ascensores")
ascensorT_aux6<-str_detect( Descripc,"acensores")
ascensorT_aux7<-str_detect( Descripc,"asensores")
ascensorT_aux8<-str_detect( Descripc,"elevadores")
ascensorT<-ifelse(ascensorT_aux1==TRUE|ascensorT_aux2==TRUE| ascensorT_aux3==TRUE|ascensorT_aux4==TRUE|ascensorT_aux5==TRUE|ascensorT_aux6==TRUE|ascensorT_aux7==TRUE|ascensorT_aux8==TRUE, 1,0 )
ascensorT<-data.frame(ascensorT)
summary(ascensorT)
ascensorT[is.na(ascensorT)] = 0
summary(ascensorT)
HOUSEOF <- cbind(HOUSEOF, ascensorT)
pat_1b <- "[:space:]+[:digit:]+[:space:]+baño" ## patrón para baños
pat_2b <- "[:space:]+[:digit:]+[:space:]+baños"
pat_3b<-"[:space:]+[:digit:]+baño"
pat_4b<-"[:space:]+[:digit:]+baños"
pat_5b <- "baño+[:space:]+[:digit:]"
pat_6b <- "baños+[:space:]+[:digit:]"
pat_7b <- "[:space:]+[:digit:]+[:space:]+banio"
pat_8b<-"[:space:]+[:digit:]+[:space:]+banios"
pat_9b <- "[:space:]+[:digit:]+banios"
pat_10b <- "banio+[:space:]+[:digit:]"
pat_11b <- "banios+[:space:]+[:digit:]"
pat_12b <- "[:space:]+[:digit:]+[:space:]+bano"
pat_13b <- "[:space:]+[:digit:]+[:space:]+banos"
pat_14b <- "[:space:]+[:digit:]+bano"
pat_15b <- "[:space:]+[:digit:]+banos"
pat_16b <- "bano+[:space:]+[:digit:]"
pat_17b <- "banos+[:space:]+[:digit:]"
pat_18b <- "[:space:]+[:digit:]+[:space:]+vano"
pat_19b <- "[:space:]+[:digit:]+[:space:]+vanos"
pat_20b <- "[:space:]+[:digit:]+vano"
pat_21b <- "[:space:]+[:digit:]+vanos"
pat_22b <- "vano+[:space:]+[:digit:]"
pat_23b <- "vanos+[:space:]+[:digit:]"
pat_24b <- "[:space:]+[:digit:]+[:space:]+vanio"
pat_25b <- "[:space:]+[:digit:]+[:space:]+vanios"
pat_26b <- "[:space:]+[:digit:]+vanio"
pat_27b<-"[:space:]+[:digit:]+vanios"
pat_28b <- "vanio+[:space:]+[:digit:]"
pat_29b <- "vanios+[:space:]+[:digit:]"
pat_30b <- "[:space:]+[:digit:]+[:space:]+vaño"
pat_31b <- "[:space:]+[:digit:]+[:space:]+vaños"
pat_32b <- "[:space:]+[:digit:]+vaño"
pat_33b<-"[:space:]+[:digit:]+vaños"
pat_34b <- "vaño+[:space:]+[:digit:]"
pat_35b <- "vaños+[:space:]+[:digit:]"
pat_36b <- "[:space:]+[:digit:]+[:space:]+bañio"
pat_37b <- "[:space:]+[:digit:]+[:space:]+bañios"
pat_38b <- "[:space:]+[:digit:]+bañio"
pat_39b<-"[:space:]+[:digit:]+bañios"
pat_40b <- "bañio+[:space:]+[:digit:]"
pat_41b <- "bañios+[:space:]+[:digit:]"
pat_42b <- "[:space:]+[:digit:]+[:space:]+bao"
pat_43b <- "[:space:]+[:digit:]+[:space:]+baos"
pat_44b <- "[:space:]+[:digit:]+bao"
pat_45b<-"[:space:]+[:digit:]+baos"
pat_46b <- "bao+[:space:]+[:digit:]"
pat_47b <- "baos+[:space:]+[:digit:]"
HOUSEOF <- HOUSEOF  %>%
mutate(banio_tot= str_extract(string=HOUSEOF$description , pattern= paste0(pat_1b,"|",pat_2b,"|", pat_3b,"|", pat_4b,"|", pat_5b,"|", pat_6b,"|", pat_7b,"|", pat_8b,"|", pat_9b,"|", pat_10b,"|", pat_11b,"|", pat_12b,"|", pat_13b,"|", pat_14b,"|", pat_15b,"|", pat_16b,"|", pat_17b,"|", pat_18b,"|", pat_19b,"|", pat_20b,"|", pat_21b,"|", pat_22b,"|", pat_23b,"|", pat_24b,"|", pat_25b,"|", pat_26b,"|", pat_27b,"|", pat_28b,"|", pat_29b,"|", pat_30b,"|", pat_31b,"|", pat_32b,"|", pat_33b,"|", pat_34b,"|", pat_35b,"|", pat_36b,"|", pat_37b,"|", pat_38b,"|", pat_39b,"|", pat_40b,"|", pat_41b,"|", pat_42b,"|", pat_43b,"|", pat_44b,"|", pat_45b,"|", pat_46b,"|", pat_47b) ))
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "," , replacement = ".")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "baño" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "baños" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "banio" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "banios" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "bano" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "banos" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vano" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vanos" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vanio" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vanios" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vaño" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "vaños" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "bañio" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "bañios" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "bao" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "baos" , replacement = "")
HOUSEOF$banio_tot<-str_replace_all(string = HOUSEOF$banio_tot, pattern = "\n" , replacement = "")
HOUSEOF$banio_tot<-as.numeric(HOUSEOF$banio_tot)
View(HOUSEOF)
HOUSEOF$banio_tot[is.na(HOUSEOF$banio_tot)] = 1 #Se imputa el número 1, teniendo en cuenta que por nivel de sanidad, debe existir al menos 1 baño en las viviendas
summary(HOUSEOF$banio_tot)
HOUSEOF$bathrooms[is.na(HOUSEOF$bathrooms)] = 1
new_banio_aux<-cbind(HOUSEOF$bathrooms, HOUSEOF$banio_tot)
baniostot<-apply(new_banio_aux, 1 , max)
baniostot<-data.frame(baniostot)
View(baniostot)
summary(baniostot)
View(HOUSEOF)
HOUSEOF<- cbind(HOUSEOF, baniostot)
View(HOUSEOF)
View(HOUSEOF)
rm(baniostot)
#Limpieza Habitaciones
HOUSEOF$rooms[is.na(HOUSEOF$rooms)] = 1
summary(HOUSEOF$rooms)
habitaciones_aux<-cbind(HOUSEOF$rooms, HOUSEOF$bedrooms)
View(habitaciones_aux)
habitaciones<-apply(habitaciones_aux, 1 , max)
habitaciones<- data.frame(habitaciones)
summary(habitaciones)
View(HOUSEOF)
HOUSEOF<- cbind(HOUSEOF,habitaciones)
View(HOUSEOF)
rm(habitaciones)
#Creación de variables geoespacial
Polchapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
Poblado = getbb(place_name = "Comuna 14 - El Poblado Medellin",
featuretype = "amenity",
format_out = "sf_polygon")
geocode_OSM("El poblado, Medellin")
PointElPoblado = geocode_OSM("Comuna 14 - El Poblado, Medellín", as.sf=T)
PointElPoblado
PointChapinero = geocode_OSM("UPZ Chapinero, Bogotá", as.sf=T)
leaflet() %>% addTiles() %>% addCircles(data=PointElPoblado)
leaflet() %>% addTiles() %>% addCircles(data=PointChapinero)
## la función addTiles adiciona la capa de OpenStreetMap
leaflet() %>% addTiles() %>% addCircles(data=PointElPoblado)
#Poligono chapinero
Polchapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
osmmed = opq(bbox = getbb("Medellin")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osmmed)
osmbog = opq(bbox = getbb(" Bogotá ")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osmbog)
osmmed_sf = osmmed %>% osmdata_sf()
View(osmmed_sf)
osmbog_sf = osmbog %>% osmdata_sf()
available_tags("amenity")
osmmed_sf = osmmed %>% osmdata_sf()
View(osmmed_sf)
available_tags("amenity")
osmbog_sf = osmbog %>% osmdata_sf()
Transporte_publicoMed = osmmed_sf$osm_points %>% select(osm_id,amenity)
View(Transporte_publicoMed)
Transporte_publicoBog = osmbog_sf$osm_points %>% select(osm_id,amenity)
View(Transporte_publicoBog)
## Pintar las transporte publico
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoMed , col="red")
leaflet() %>% addTiles() %>% addCircleMarkers(data=Transporte_publicoBog, col="blue")%>% addPolygons(data= Polchapinero, col = "RED")
p_load(rgdal)
##Extracción datos de manzanas
#Apartamentos
CHAPINERO = getbb(place_name = "Chapinero Bogotá",
featuretype = "amenity",
format_out = "sf_polygon")
Poblado = getbb(place_name = "Comuna 14 - El Poblado Medellin",
featuretype = "amenity",
format_out = "sf_polygon")
#Bares Bogotá y Antioquia
barbog = opq(bbox = st_bbox(mnzBogota)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barbog %>% head()
barant = opq(bbox = st_bbox(mnzAntioquia)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barant %>% head()
#Visualizar info
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%  # transportepub
addCircles(data= HOUSEOF , col="red", weight=2) %>% # apartamentos
addCircles(data=barbog , col="black" , weight=2)
#Bares Bogotá y Antioquia
barbog = opq(bbox = st_bbox(mnzBogota)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barbog %>% head()
barant = opq(bbox = st_bbox(mnzMedellin)) %>%
add_osm_feature(key = "amenity", value = "bar") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
barant %>% head()
#Visualizar info
leaflet() %>% addTiles() %>%
addPolygons(data=mnzBogota) %>% # manzanas
addPolygons(data= CHAPINERO , col="green") %>%  # transportepub
addCircles(data= HOUSEOF , col="red", weight=2) %>% # apartamentos
addCircles(data=barbog , col="black" , weight=2)
st_crs(mnzBogota) == st_crs(HOUSEOF)
st_crs(mnzAntioquia) == st_crs(HOUSEOF)
st_crs(mnzMedellin) == st_crs(HOUSEOF)
#Se calculará distancia a bares
#Con respecto a bares Bogotá
dist_bar_bog <- st_distance(x=HOUSEOF , y=barbog)
min_dist_bog <- apply(dist_bar_bog , 1 , min)
min_dist_bog<-data.frame(min_dist_bog)
#Con respecto a bares Medellín
dist_bar_med <- st_distance(x=HOUSEOF , y=barant)
min_dist_bar_med <- apply(dist_bar_med, 1 , min)
min_dist_bar_med<-data.frame(min_dist_bar_med)
#Se selecciona la menor distancia, esto porque se compararon distancias de apartamentos en Bogotá con ubicaciones en Antioquia y viceversa
min_dist_bar<-cbind(min_dist_bog,min_dist_bar_med)
min_dist_bar_<- apply(min_dist_bar, 1 , min)
min_dist_bar_<-data.frame(min_dist_bar_)
#Se incorpora la mínima distancia a bares a la base de datos
HOUSEOF<-cbind(HOUSEOF, min_dist_bar_ )
#Se obtendrá la distancia mínima a transporte público
#Con respecto a transporte público en Bogotá
dist_transp_bog<- st_distance(x=HOUSEOF , y=Transporte_publicoBog)
min_dist_transp_bog <- apply(dist_transp_bog , 1 , min)
min_dist_transp_bog<-data.frame(min_dist_transp_bog)
#Con respecto a transporte público en Medellín
dist_transp_med <- st_distance(x=HOUSEOF , y=Transporte_publicoMed)
min_dist_transp_med <- apply(dist_transp_med, 1 , min)
min_dist_transp_med<-data.frame(min_dist_transp_med)
#Se selecciona la menor distancia, esto porque se compararon distancias de apartamentos en Bogotá con ubicaciones en Antioquia y viceversa
min_dist_transp<-cbind(min_dist_transp_bog,min_dist_transp_med)
min_dist_transp_<- apply(min_dist_transp, 1 , min)
min_dist_transp_<-data.frame(min_dist_transp_)
#Se incorpora la mínima distancia a bares a la base de datos
HOUSEOF<-cbind(HOUSEOF, min_dist_transp_)
table(HOUSEOF$base)
View(HOUSEOF)
View(HOUSEOF)
cantidad_na <- sapply(HOUSEOF, function(x) sum(is.na(x)))
cantidad_na <- data.frame(cantidad_na)
porcentaje_na <- cantidad_na/nrow(HOUSEOF)
porcentaje_na <-porcentaje_na*100
porcentaje_na #Visualizo el porcentaje de los datos que tienen NA
cantidad_na
####Descripción de variables
#Habitaciones
habitaciones <- data.frame(DTRAIN$habitaciones)
class(DTRAIN$habitaciones)
#Limpieza Habitaciones
HOUSEOF$rooms[is.na(HOUSEOF$rooms)] = 1
summary(HOUSEOF$rooms)
habitaciones_aux<-cbind(HOUSEOF$rooms, HOUSEOF$bedrooms)
View(habitaciones_aux)
habitaciones<-apply(habitaciones_aux, 1 , max)
habitaciones<- data.frame(habitaciones)
View(habitaciones)
summary(habitaciones)
View(HOUSEOF)
HOUSEOF<- cbind(HOUSEOF,habitaciones)
View(HOUSEOF)
rm(habitaciones)
####Descripción de variables
#Habitaciones
habitaciones <- data.frame(DTRAIN$habitaciones)
####Descripción de variables
#Habitaciones
habitaciones <- data.frame(HOUSEOF$habitaciones)
mean(HOUSEOF$habitaciones)
modehabitaciones <- function(habitaciones){
return(as.numeric(names(which.max(table(habitaciones)))))}
modehabitaciones(habitaciones)
summary(habitaciones)
rm(habitaciones)
#Descripción baños
baños <- as.numeric(HOUSEOF$baniostot)
class(baños)
plot(hist(baños),col = "red", main="Histograma No. de baños de la vivienda",
xlab="Habitaciones",
ylab="Frecuencia")
min(baños)
max(baños)
mean(baños)
modebaños<- function(baños){
return(as.numeric(names(which.max(table(baños)))))}
modebaños(baños)
summary(baños)
#Ascensor
Ascensor <- as.factor(HOUSEOF$ascensorT)
class(Ascensor)
skim(Ascensor)
Ascensor <- factor(Ascensor, labels = c("1", "0"))
summary(Ascensor)
rm(Ascensor)
#Parqueadero
Parqueadero <- as.factor(HOUSEOF$parqueaderoT)
class(Parqueadero)
Parqueadero <- factor(Parqueadero, labels = c("1", "0"))
summary(Parqueadero)
rm(Parqueadero)
#Tipo inmueble
TipoVivienda <- as.factor(HOUSEOF$property_type)
class(TipoVivienda)
summary(TipoVivienda)
rm(TipoVivienda)
#Área
área <- data.frame(HOUSEOF$surface_new_3)
class(DTRAIN$surface_new_3)
plot(hist(DTRAIN$surface_new_3),col = "black", main="Histograma No. de habitaciones de la vivienda",
xlab="Habitaciones",
ylab="Frecuencia")
class(HOUSEOF$surface_new_3)
plot(hist(HOUSEOF$surface_new_3),col = "black", main="Histograma No. de habitaciones de la vivienda",
xlab="Habitaciones",
ylab="Frecuencia")
modeárea <- function(área){
return(as.numeric(names(which.max(table(área)))))}
modeárea(área)
summary(área)
rm(área)
cantidad_na <- sapply(HOUSEOF, function(x) sum(is.na(x)))
cantidad_na <- data.frame(cantidad_na)
porcentaje_na <- cantidad_na/nrow(HOUSEOF)
porcentaje_na <-porcentaje_na*100
porcentaje_na #Visualizo el porcentaje de los datos que tienen NA
df_hab<-HOUSEOF$habitaciones==HOUSEOF$habitaciones.1
table(df_hab)
# Obtendremos la distancia más cercana a parques
#Parques Bogotá y Medellín
Parkbog = opq(bbox = st_bbox(mnzBogota)) %>%
add_osm_feature(key = "amenity", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
# Obtendremos la distancia más cercana a parques
#Parques Bogotá y Medellín
Parkbog = opq(bbox = st_bbox(mnzBogota)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed = opq(bbox = st_bbox(mnzMedellin)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed  %>% head()
centroides_park_Bog <- gCentroid(as(Parkbog$geometry, "Spatial"), byid = T)
st_crs(mnzBogota) == st_crs(HOUSEOF)
st_crs(mnzMedellin) == st_crs(HOUSEOF)
dist_park_bog <- st_distance(x=HOUSEOF , y=barbog)
dist_park_bog <- st_distance(x=HOUSEOF , y=Parkbog)
centroides_PARK_BOG <- gCentroid(as(Parkbog$geometry, "Spatial"), byid = T)
require(rgeos)
pload(rgeos)
require(pacman)
pload(rgeos)
p_load(rgeos)
centroides_PARK_BOG <- gCentroid(as(Parkbog$geometry, "Spatial"), byid = T)
centroides_PARK_Med <- gCentroid(as(Parkmed$geometry, "Spatial"), byid = T)
#Se calcula la mínima distancia a parques de los apartamentos con respecto a parques de Bogotá
centroides_park_bog_sf <- st_as_sf(centroides_PARK_BOG, coords = c("x", "y"),crs=4326)
centroides_park_med_sf <- st_as_sf(centroides_PARK_Med, coords = c("x", "y"),crs=4326)
#Se calcula la mínima distancia a parques de los apartamentos con respecto a parques de Bogotá
dist_park_bog <- st_distance(x = HOUSEOF, y = centroides_park_bog_sf)
PolPoblado_buf <- st_buffer(PolPoblado,dist=0.001)
PolChap_buf <- st_buffer(CHAPINERO,dist=0.001)
mnz_chap_buf <- mnzBogota[Polchapinero,]
gc()
gc()
gc()
PolPoblado_buf <- st_buffer(PolPoblado,dist=0.001)
PolChap_buf <- st_buffer(CHAPINERO,dist=0.001)
mnz_chap_buf <- mnzBogota[Polchapinero,]
#Parques Bogotá y Medellín
Parkbog = opq(bbox = st_bbox(mnz_chap_buf)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkbog  %>% head()
Parkmed = opq(bbox = st_bbox(mnzpob)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed = opq(bbox = st_bbox(mnz_pob)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed = opq(bbox = st_bbox(mnz_pob)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed = opq(bbox = st_bbox(mnz_pob)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
Parkmed = opq(bbox = st_bbox(mnz_pob)) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id)
Parkmed  %>% head()
Parkbog  %>% head()
Parkmed  %>% head()
#Se calcula el centroide para los parques de Bogotá y Medellín
centroides_PARK_BOG <- gCentroid(as(Parkbog$geometry, "Spatial"), byid = T)
centroides_PARK_Med <- gCentroid(as(Parkmed$geometry, "Spatial"), byid = T)
#Se convierten los centroides a formato SF con coordenadas WGS84
centroides_park_bog_sf <- st_as_sf(centroides_PARK_BOG, coords = c("x", "y"),crs=4326)
centroides_park_med_sf <- st_as_sf(centroides_PARK_Med, coords = c("x", "y"),crs=4326)
#Se calcula la mínima distancia a parques de los apartamentos con respecto a parques de Bogotá
dist_park_bog <- st_distance(x = HOUSEOF, y = centroides_park_bog_sf)
min_dist_park_bog <- apply(dist_park_bog, 1 , min)
min_dist__park_bog<-data.frame(min_dist__park_bog)
min_dist_park_bog<-data.frame(min_dist_park_bog)
#Se calcula la mínima distancia a parques de los apartamentos con respecto a parques de Medellín
centroides_park_med_sf <- st_as_sf(centroides_PARK_Med, coords = c("x", "y"),crs=4326)
dist_park_med <- st_distance(x = HOUSEOF, y = centroides_park_med_sf)
min_dist_park_med <- apply(dist_park_med, 1 , min)
min_dist_park_med<-data.frame(min_dist_park_med)
#Se selecciona la menor distancia, esto porque se compararon distancias de apartamentos en Bogotá con ubicaciones en Medellín y viceversa
min_dist_park_<-cbind(min_dist_park_bog,min_dist_park_med)
min_dist_park<- apply(min_dist_bar_, 1 , min)
min_dist_park<- apply(min_dist_park_, 1 , min)
rm(min_dist_park_, min_dist_park)
#Se selecciona la menor distancia, esto porque se compararon distancias de apartamentos en Bogotá con ubicaciones en Medellín y viceversa
min_dist_park_<-cbind(min_dist_park_bog,min_dist_park_med)
min_dist_park<- apply(min_dist_park_, 1 , min)
min_dist_park<-data.frame(min_dist_park)
#Se incorpora la mínima distancia a parques a la base de datos
HOUSEOF<-cbind(HOUSEOF, min_dist_park )
View(HOUSEOF)
View(HOUSEOF)
saveRDS(HOUSEOF, "../Elementos_Guardados/HOUSEOF.rds" )
cantidad_na <- sapply(HOUSEOF, function(x) sum(is.na(x)))
cantidad_na <- data.frame(cantidad_na)
porcentaje_na <- cantidad_na/nrow(HOUSEOF)
porcentaje_na <-porcentaje_na*100
porcentaje_na #Visualizo el porcentaje de los datos que tienen NA
HOUSEM<-subset(HOUSEOF, select=c("property_id", "l3", "property_type", "price", "surface_new_3", "MANZ_CCNCT", "geometry", "parqueaderoT", "ascensorT", "baniostot", "habitaciones", "base", "min_dist_bar_", "min_dist_transp_", "min_dist_park"))
#Para guardar la base de datos
saveRDS(HOUSEM, "../Elementos_Guardados/HOUSEM.rds" )
DTRAINHOUSE<- HOUSEM[HOUSEM$base=="test",]
DTESTHOUSE<- HOUSEM[HOUSEM$base=="train",]
#Para guardar la base de datos
saveRDS(DTRAINHOUSE, "../Elementos_Guardados/DTRAINHOUSE.rds" )
saveRDS(DTESTHOUSE, "../Elementos_Guardados/DTESTHOUSE.rds" )
